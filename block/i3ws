#!/bin/env python3

import argparse
import i3ipc


def get_args():
    """Parse arguments."""
    p = argparse.ArgumentParser(description='Output i3 workspace data '
                                          + 'with each block '
                                          + 'prefixed and suffixed '
                                          + 'by specific identifiers '
                                          + 'according to type')

    p.add_argument('-S', action='store_true', dest='strip',
                         help='Strip workspace numbers')

    p.add_argument('-B', action='store_true', dest='butt',
                         help='Add lemonbar formatted buttons')

    p.add_argument('-s', dest='sep', default='',
                         help='Separator')

    p.add_argument('-f', dest='unf', default=['', ''],
                         nargs=2, metavar=('PREFIX', 'SUFFIX'),
                         help='Unfocused block')

    p.add_argument('-F', dest='foc', default=['', ''],
                         nargs=2, metavar=('PREFIX', 'SUFFIX'),
                         help='Focused block')

    p.add_argument('-u', dest='urg', default=['', ''],
                         nargs=2, metavar=('PREFIX', 'SUFFIX'),
                         help='Urgent block')

    return p.parse_args()


def strip_ws(s):
    """Strip workspace numbers.

    Remove the number and the colon.
    """

    return s[s.find(':') + 1:]


def prepend_chars(s, char, prep):
    """Prepend every instance of a character.

    In s, prepend every instance of char with prep.
    """

    r = ''

    for sec in s.split(char):
        r += sec + prep + char

    return r[:len(r) - len(prep + char)]


def print_workspaces():
    """Generate the workspace numbers."""

    r = '' # print

    # Iterate through workspaces
    for w in i3.get_tree().workspaces():

        # Strip workspace numbers if necessary
        if arg.strip:
            n = strip_ws(w.name)
        else:
            n = w.name

        # When a window is focused the workspace isn't
        # So we check if the workspace contains a focused container
        if w.focused or w.find_focused() is not None:
            r += arg.foc[0] + n + arg.foc[1] + arg.sep

        elif w.urgent:
            r += arg.urg[0] + n + arg.urg[1] + arg.sep

        else:
            r += arg.unf[0] + n + arg.unf[1] + arg.sep

        # Add lemonbar button commands if necessary
        if arg.butt:
            r = '%{A:i3-msg workspace ' + prepend_chars(w.name, ':', '\\') \
                + ':}' + r + '%{A}'

    # Remove separator and print
    # Flush is necessary for piping
    print(r[:len(r) - len(arg.sep)], flush=True)

def on_event(self, e):
    """Called on every workspace focus."""

    print_workspaces()


if __name__ == '__main__':

    # Arguments
    arg = get_args()

    # Connect to i3
    i3 = i3ipc.Connection()

    # Initial workspaces print
    print_workspaces()

    # Subscribe to events and start main loop
    i3.on('workspace::', on_event)
    i3.main()
